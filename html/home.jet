<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">    
    <title>Home</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css" integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
    .chatbox {
    outline: 1px solid silver;    
    min-height: 160px;
    padding: 0.5em;
    }
    </style>
</head>
<body>
    <div class="container">
    <div class="row">
    <div class="col"><h1 class="mt-3">This is the home page 😎🤘</h1></div>
    </div>
    <hr>
    <div class="row">
    <div class="col-md-8">
    <h3>Chat</h3>
    <p><a href="https://github.com">Go to hell 🤪</a></p>
    <div class="form-group">
    <label for="username">Username:</label>
    <input type="text" name="username" id="username" class="form-control" autocomplete="off" />
    </div>
    <div class="form-group">
        <label for="message">Message:</label>
        <input type="text" name="message" id="message" class="form-control" autocomplete="off" />
    </div>
    <hr>
        <a href="javascript:void(0);" class="btn btn-primary" id="sendBtn">Send</a>
        <input type="hidden" name="action" id="action" />
    <div class="mt-2 float-end" id="connection_status">

    </div>
    <div id="output" class="chatbox mt-3">
    </div>
    </div>
    <div class="col-md-4">
    <h3>Who's online</h3>
    <ul id="online_users">
    
    </ul>
    </div>
    </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js" integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    
    <script src="/static/reconnecting-websocket.min.js"></script>
    <script>
        // after the web page finished loading, automaticaly send a request to websockets end point and that way you open a new websockets connection for the new user
        let socket = null;
        const userName = document.getElementById("username");
        const messageToSend = document.getElementById("message");
        let chatboxContent = document.getElementById("output");

        // Notify the server when user is leaving the chat
        window.onbeforeunload = () => {

                console.log("User leaving the chat 🥹");
                let jsonData = {};
                jsonData["action"] = "user_left";
                socket.send(JSON.stringify(jsonData));
        
        }

        document.addEventListener("DOMContentLoaded", function() {
        socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws", null, {debug: true, reconnectInterval: 3000});

        const offline = `<span class="badge bg-danger">Not connected 😒</span>`;
        const online = `<span class="badge bg-success">Connected 🤘😎</span>`;
        let connStatusDisplay = document.getElementById("connection_status");



        socket.onopen = () => {

        console.log("Successfuly connected to the WebSocket 🚀🤓🤘");
        connStatusDisplay.innerHTML = online;
        
        }

        socket.onclose = () => {

         console.log("The WebSocket connection closed 🙋‍♂️");
         connStatusDisplay.innerHTML = offline;
        
        }

        socket.onerror = error => {

        console.log("There was an error 😫 =>", error);
        connStatusDisplay.innerHTML = offline;
        
        }

        // socket.onmessage = incoming json data payload from the server
        socket.onmessage = msg => {
        
        console.log("*** Message recieved from the server: ***")

        // convert the data from JSON to Javascript
        let data = JSON.parse(msg.data);
        // console.log(data);
        console.log("Action is ", data.action);

        switch (data.action) {

            case "list_users":
                let ul = document.getElementById("online_users");
                // Empty the current displayed list
                while (ul.firstChild) ul.removeChild(ul.firstChild);

                // Populate the users list that will display the users with the fresh data recieved from the server (via the websocket connection)
                if (data.connected_users.length > 0) {

                    data.connected_users.forEach(item => {

                     let li = document.createElement("li");
                     li.appendChild(document.createTextNode(item));
                     ul.appendChild(li);
                    
                    })
                
                }
                break;

                // Display a message a connected user sent, to all the connected users
            case "broadcast":
                    console.log("Entering broadcast")
                    chatboxContent.innerHTML = chatboxContent.innerHTML + data.message + "<br>";
                    break;
        }        
        }

        
        userName.addEventListener("change", function() {
            let jsonData = {};
            jsonData["action"] = "user_joined";
            jsonData["username"] = this.value;
            console.log(jsonData)
            socket.send(JSON.stringify(jsonData))

        })

        });

        // Listen to keyboard Enter event for sending message
       messageToSend.addEventListener("keydown", function(event) {
            if (event.code === "Enter") {

            console.log("Enter fired 🚀")

                // First check if there are connected to the websocket
                if (!socket) {
                    console.log("no connection 🤷‍♂️");
                    return false;
                }

                if (!userName.value || !messageToSend.value) {

                errorMessage("Fill out all the necessary fields 🤨");              
                
                } else {

                event.preventDefault();
                event.stopPropagation();
                sendMessage(); 
                
                }              

            }
        
        });

        // Listen to mouse click event for sending message
        document.getElementById("sendBtn").addEventListener("click", function(event) {

        console.log("Mouse click fired 🚀");

                // First check if there are connected to the websocket
                if (!socket) {
                    console.log("no connection 🤷‍♂️");
                    return false;
                }

                if (!userName.value || !messageToSend.value) {

                errorMessage("Fill out all the necessary fields 🤨");              
                
                } else {

                console.log("Entering return on click")

                event.preventDefault();
                event.stopPropagation();
                sendMessage(); 
                
                }                   
        
        
        })
        // Send message fucntion
        const sendMessage = () => {

        console.log("Send message fired!")
        console.log("Username sent is ", userName.value)
        console.log("Message to send is ", messageToSend.value)

            let jsonData = {};
           

            jsonData["action"] = "user_broadcasted_msg"
            // Check if the action is valid
            if (!userName.value || !messageToSend.value) {

                console.log("Invalid attempt to send message 🤨");
                return false;            
            }

            jsonData["username"] = userName.value;
            jsonData["message"] = messageToSend.value;

            console.log("Payload sent to the server: \n", jsonData)

            socket.send(JSON.stringify(jsonData))

            messageToSend.value = "";
        
        }

        // Alert message function
        const errorMessage = msg => {

        notie.alert({
            type: 'error', // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
            text: msg,
            /*stay: Boolean, // optional, default = false
            time: Number, // optional, default = 3, minimum = 1,
            position: String // optional, default = 'top', enum: ['top', 'bottom']*/
            })
        
        
        }

    </script>
</body>
</html>